/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package pt.brunojesus.truck.codegen.api;

import pt.brunojesus.truck.codegen.dto.ErrorDTO;
import pt.brunojesus.truck.codegen.dto.TruckDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-01-04T16:39:10.553706Z[Europe/Lisbon]")
@Api(value = "trucks", description = "the trucks API")
public interface TrucksApi {

    @ApiOperation(value = "Creates a truck", nickname = "createTruck", notes = "", tags={ "trucks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Returns location in header"),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDTO.class) })
    @RequestMapping(value = "/trucks",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createTruck(@ApiParam(value = "The new truck"  )  @Valid @RequestBody TruckDTO body);


    @ApiOperation(value = "Deletes a specific truck", nickname = "deleteTruck", notes = "", tags={ "trucks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Returns no content"),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDTO.class) })
    @RequestMapping(value = "/trucks/{truckId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTruck(@ApiParam(value = "The id of the truck to delete",required=true) @PathVariable("truckId") Long truckId);


    @ApiOperation(value = "Get a specific truck", nickname = "getTruckById", notes = "", response = TruckDTO.class, tags={ "trucks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The requested truck", response = TruckDTO.class),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDTO.class) })
    @RequestMapping(value = "/trucks/{truckId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TruckDTO> getTruckById(@ApiParam(value = "The id of the truck to retrieve",required=true) @PathVariable("truckId") Long truckId);


    @ApiOperation(value = "List all trucks", nickname = "listTrucks", notes = "", response = TruckDTO.class, responseContainer = "List", tags={ "trucks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of pets.", response = TruckDTO.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDTO.class) })
    @RequestMapping(value = "/trucks",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<TruckDTO>> listTrucks();


    @ApiOperation(value = "Update a specific truck", nickname = "updateTruck", notes = "", tags={ "trucks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Returns no content"),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDTO.class) })
    @RequestMapping(value = "/trucks/{truckId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateTruck(@ApiParam(value = "The id of the truck to update",required=true) @PathVariable("truckId") Long truckId,@ApiParam(value = "The updated truck"  )  @Valid @RequestBody TruckDTO body);

}
