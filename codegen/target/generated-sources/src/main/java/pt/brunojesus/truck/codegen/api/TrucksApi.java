/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package pt.brunojesus.truck.codegen.api;

import pt.brunojesus.truck.codegen.dto.ErrorDTO;
import pt.brunojesus.truck.codegen.dto.TruckDTO;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-12-31T23:54:32.336Z[Europe/London]")
@Api(value = "trucks", description = "the trucks API")
public interface TrucksApi {

    Logger log = LoggerFactory.getLogger(TrucksApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Creates a truck", nickname = "createTruck", notes = "", tags={ "trucks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Returns location in header"),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDTO.class) })
    @RequestMapping(value = "/trucks",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Void> createTruck() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TrucksApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Deletes a specific truck", nickname = "deleteTruck", notes = "", tags={ "trucks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Returns no content"),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDTO.class) })
    @RequestMapping(value = "/trucks/{truckId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteTruck(@ApiParam(value = "The id of the truck to delete",required=true) @PathVariable("truckId") Long truckId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TrucksApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get a specific truck", nickname = "getTruckById", notes = "", response = TruckDTO.class, tags={ "trucks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The requested truck", response = TruckDTO.class),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDTO.class) })
    @RequestMapping(value = "/trucks/{truckId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TruckDTO> getTruckById(@ApiParam(value = "The id of the truck to retrieve",required=true) @PathVariable("truckId") Long truckId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"horsepower\" : 6.0274563,\r\n  \"fuelType\" : {\r\n    \"name\" : \"name\",\r\n    \"id\" : 5\r\n  },\r\n  \"modifiedAt\" : \"2000-01-23\",\r\n  \"model\" : \"model\",\r\n  \"displacement\" : 1.4658129,\r\n  \"id\" : 0,\r\n  \"classification\" : {\r\n    \"name\" : \"name\",\r\n    \"id\" : 5\r\n  },\r\n  \"colors\" : [ {\r\n    \"name\" : \"name\",\r\n    \"hex\" : \"hex\",\r\n    \"id\" : 7\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"hex\" : \"hex\",\r\n    \"id\" : 7\r\n  } ],\r\n  \"applications\" : [ {\r\n    \"name\" : \"name\",\r\n    \"id\" : 2\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"id\" : 2\r\n  } ]\r\n}", TruckDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TrucksApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "List all trucks", nickname = "listTrucks", notes = "", response = TruckDTO.class, responseContainer = "List", tags={ "trucks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of pets.", response = TruckDTO.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDTO.class) })
    @RequestMapping(value = "/trucks",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<TruckDTO>> listTrucks() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\r\n  \"horsepower\" : 6.0274563,\r\n  \"fuelType\" : {\r\n    \"name\" : \"name\",\r\n    \"id\" : 5\r\n  },\r\n  \"modifiedAt\" : \"2000-01-23\",\r\n  \"model\" : \"model\",\r\n  \"displacement\" : 1.4658129,\r\n  \"id\" : 0,\r\n  \"classification\" : {\r\n    \"name\" : \"name\",\r\n    \"id\" : 5\r\n  },\r\n  \"colors\" : [ {\r\n    \"name\" : \"name\",\r\n    \"hex\" : \"hex\",\r\n    \"id\" : 7\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"hex\" : \"hex\",\r\n    \"id\" : 7\r\n  } ],\r\n  \"applications\" : [ {\r\n    \"name\" : \"name\",\r\n    \"id\" : 2\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"id\" : 2\r\n  } ]\r\n}, {\r\n  \"horsepower\" : 6.0274563,\r\n  \"fuelType\" : {\r\n    \"name\" : \"name\",\r\n    \"id\" : 5\r\n  },\r\n  \"modifiedAt\" : \"2000-01-23\",\r\n  \"model\" : \"model\",\r\n  \"displacement\" : 1.4658129,\r\n  \"id\" : 0,\r\n  \"classification\" : {\r\n    \"name\" : \"name\",\r\n    \"id\" : 5\r\n  },\r\n  \"colors\" : [ {\r\n    \"name\" : \"name\",\r\n    \"hex\" : \"hex\",\r\n    \"id\" : 7\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"hex\" : \"hex\",\r\n    \"id\" : 7\r\n  } ],\r\n  \"applications\" : [ {\r\n    \"name\" : \"name\",\r\n    \"id\" : 2\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"id\" : 2\r\n  } ]\r\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TrucksApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update a specific truck", nickname = "updateTruck", notes = "", tags={ "trucks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Returns location in header"),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDTO.class) })
    @RequestMapping(value = "/trucks/{truckId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateTruck(@ApiParam(value = "The id of the truck to update",required=true) @PathVariable("truckId") Long truckId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TrucksApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
